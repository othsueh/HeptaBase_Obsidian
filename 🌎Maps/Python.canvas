{
	"nodes":[
		{"type":"text","text":"# Panda","id":"e9140c5044f1cc96","x":-110,"y":-260,"width":150,"height":60},
		{"type":"text","text":"# describe\n> get summary of the dataset.\n\n```python\ndata.describe()\n#output\n\"\"\"\ncount    129971.000000\nmean         88.447138\n             ...      \n75%          91.000000\nmax         100.000000\nName: points, Length: 8, dtype: float64\n\"\"\"\n```","id":"a80eebedfd591de2","x":-270,"y":-120,"width":470,"height":412},
		{"type":"text","text":"# get unique set\n> to get unique value in column\n```python\nreview.unique()\n#output\n\"\"\"\narray(['Kerin Oâ€™Keefe', 'Roger Voss'])\n\"\"\"\n```\n","id":"4a12412a13023d60","x":-265,"y":346,"width":465,"height":294},
		{"type":"text","text":"# map\n> create new representation from exist data.\n\n```python\nreview_points_mean = reviews.points.mean()\nreviews.points.map(lambda p: p - review_points_mean)\n#output \n\"\"\"\n0        -1.447138\n1        -1.447138\n            ...   \n129969    1.552862\n129970    1.552862\nName: points, Length: 129971, dtype: float64\n\"\"\"\n```","id":"dd7659bd843a0ad8","x":-369,"y":1120,"width":674,"height":436},
		{"type":"text","text":"# apply\n> same used as map. But can transform a whole DataFrame by calling a custom method\n\n```python\ndef remean_points(row):\n    row.points = row.points - review_points_mean\n    return row\n\nreviews.apply(remean_points, axis='columns')\n```","id":"79ddc0a13eb83a4c","x":360,"y":1181,"width":552,"height":314},
		{"type":"text","text":"# get value_count\n> to get value in count.\n\n```python\nreview.value_counts()\n#output\n\"\"\"\nRoger Voss           25514\nMichael Schachner    15134\n                     ...  \nFiona Adams             27\nChristina Pickard        6\nName: taster_name, Length: 19, dtype: int64\n\"\"\"\n```","id":"1cf5413efbaabe20","x":-292,"y":680,"width":520,"height":389},
		{"type":"text","text":"# group\n> Grouping make us do some specific to the specialized data. The group's topic can be the index of the dataframe.\n\n```python\nreviews.groupby('points').points.count()\n#output\n\"\"\"\npoints\n80     397\n81     692\n      ... \n99      33\n100     19\nName: points, Length: 21, dtype: int64\n\"\"\"\n```","id":"dec973f04d668542","x":-307,"y":1640,"width":550,"height":490},
		{"type":"text","text":"# agg\n> help you runs many functions on dataframe simultaneously.\n\n```python\nreviews.groupby(['country']).price.agg([len, min, max])\n#output\n```\n\n||len|min|max|\n|---|---|---|---|\n|country||||\n|Argentina|3800|4.0|230.0|\n|Armenia|2|14.0|15.0|\n|...|...|...|...|\n|Ukraine|14|6.0|13.0|\n|Uruguay|109|10.0|130.0|","id":"b6ab48e8aae8d141","x":360,"y":1640,"width":585,"height":507},
		{"type":"text","text":"# sort\n> sort the dataframe with specific topic.\n\n## sort_values method\n```python\n\ncountries_reviewed.sort_values(by='len', ascending=False)\n#output\n```\n|country|province|len|\n|---|---|---|\n|392|US|California|36247|\n|415|US|Washington|8639|\n|...|...|...|...|\n|63|Chile|Coelemu|1|\n|149|Greece|Beotia|1|\n\n## sort_index method\n```python\ncountries_reviewed.sort_index()\n#output\n```\n|country|province|len|\n|---|---|---|\n|0|Argentina|Mendoza Province|3264|\n|1|Argentina|Other|536|\n|...|...|...|...|\n|423|Uruguay|San Jose|3|\n|424|Uruguay|Uruguay|24|","id":"ca34367713eae9da","x":-361,"y":2200,"width":658,"height":921},
		{"id":"6d674173ca814fd2","x":-1286,"y":-483,"width":126,"height":63,"type":"text","text":"# DSA"},
		{"id":"2e6ebe862d3324b2","x":-1352,"y":-362,"width":250,"height":60,"type":"text","text":"# mapping"}
	],
	"edges":[
		{"id":"c749034a81fc877c","fromNode":"e9140c5044f1cc96","fromSide":"bottom","toNode":"a80eebedfd591de2","toSide":"top"},
		{"id":"dfef9b8e6aba8dfc","fromNode":"a80eebedfd591de2","fromSide":"bottom","toNode":"4a12412a13023d60","toSide":"top"},
		{"id":"568d56722eed708b","fromNode":"4a12412a13023d60","fromSide":"bottom","toNode":"1cf5413efbaabe20","toSide":"top"},
		{"id":"78caf946c4a5961b","fromNode":"1cf5413efbaabe20","fromSide":"bottom","toNode":"dd7659bd843a0ad8","toSide":"top"},
		{"id":"55092d93a7aa6f7b","fromNode":"dd7659bd843a0ad8","fromSide":"right","toNode":"79ddc0a13eb83a4c","toSide":"left"},
		{"id":"cf6e7369fb6b40eb","fromNode":"dd7659bd843a0ad8","fromSide":"bottom","toNode":"dec973f04d668542","toSide":"top"},
		{"id":"9b6e1507dc4ae747","fromNode":"dec973f04d668542","fromSide":"right","toNode":"b6ab48e8aae8d141","toSide":"left"},
		{"id":"0384cd312b479f90","fromNode":"dec973f04d668542","fromSide":"bottom","toNode":"ca34367713eae9da","toSide":"top"},
		{"id":"5030a5ad80578327","fromNode":"6d674173ca814fd2","fromSide":"bottom","toNode":"2e6ebe862d3324b2","toSide":"top"}
	]
}